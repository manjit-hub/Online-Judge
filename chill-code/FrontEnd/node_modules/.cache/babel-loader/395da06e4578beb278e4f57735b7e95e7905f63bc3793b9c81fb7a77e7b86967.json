{"ast":null,"code":"// import React from 'react';\n// import './ProblemsCSS.css';\n\n// function ProblemsPage() {\n//   return(\n//       <div className=\"split\">\n//         <div className=\"dashboard\">\n//           <button className='btnPrb'><img src=\"/Assets/DashboardLogo.png\" alt=\"Logo\" />Dashboard</button>\n//           <button className='btnPrb'><img src=\"/Assets/3LineLogo.png\" alt=\"\" />Leaderboard</button>\n//           <button className='btnPrb'><img src=\"/Assets/DiscussionLogo.png\" alt=\"Logo\" />Discussion</button>\n//           <button className='btnPrb'><img src=\"/Assets/ProgressLogo.png\" alt=\"\" />Progress</button>\n//           <button className='btnPrb'><img src=\"/Assets/ProfileLogo.png\" alt=\"\" />Profile</button>\n//         </div>\n\n//         <div className=\"rightSide\">\n//           <div className=\"search\">\n//             <h1>Problems</h1>\n//             <input type=\"text\" className=\"inpPrb\" placeholder=\"Search Problems\" />\n//           </div>\n\n//           <div className=\"tags\">\n//             <button className='PrbTagsBtn'>All</button>\n//             <button className='PrbTagsBtn'>Easy</button>\n//             <button className='PrbTagsBtn'>Medium</button>\n//             <button className='PrbTagsBtn'>Hard</button>\n//             <button className='PrbTagsBtn'>Binary Search</button>\n//             <button className='PrbTagsBtn'>Recursion</button>\n//             <button className='PrbTagsBtn'>DP</button>\n//             <button className='PrbTagsBtn'>Back Tracking</button>\n//             <button className='PrbTagsBtn'>Graph</button>\n//             <button className='PrbTagsBtn'>Array</button>\n//           </div>\n\n//           {/* ----- PROBLEMS ----- */}\n//           <div className=\"problems\">\n//           const CodingProblems = () => {\n//               const codingProblems = [\n//                   { title: \"Palindrome Check\", difficulty: \"Easy\", solved: \"No\", acceptance_rate: 80.25 },\n//                   { title: \"Reverse Linked List\", difficulty: \"Medium\", solved: \"No\", acceptance_rate: 60.75 },\n//                   { title: \"Stack Implementation\", difficulty: \"Easy\", solved: \"No\", acceptance_rate: 85.50 },\n//                   { title: \"Queue using Stacks\", difficulty: \"Medium\", solved: \"No\", acceptance_rate: 70.25 },\n//                   { title: \"Factorial Recursion\", difficulty: \"Easy\", solved: \"No\", acceptance_rate: 90.75 },\n//                   { title: \"Binary Search\", difficulty: \"Easy\", solved: \"No\", acceptance_rate: 85.25 },\n//                   { title: \"Nth Fibonacci\", difficulty: \"Medium\", solved: \"No\", acceptance_rate: 65.50 },\n//                   { title: \"BST Check\", difficulty: \"Medium\", solved: \"No\", acceptance_rate: 70.25 },\n//                   { title: \"Selection Sort\", difficulty: \"Easy\", solved: \"No\", acceptance_rate: 90.50 },\n//                   { title: \"Shortest Path (Dijkstra)\", difficulty: \"Hard\", solved: \"No\", acceptance_rate: 40.75 },\n//                   { title: \"Priority Queue (Heap)\", difficulty: \"Medium\", solved: \"No\", acceptance_rate: 70.25 },\n//                   { title: \"Anagram Check\", difficulty: \"Easy\", solved: \"No\", acceptance_rate: 85.50 },\n//                   { title: \"Longest Substring\", difficulty: \"Medium\", solved: \"No\", acceptance_rate: 65.75 },\n//                   { title: \"DFS on Graph\", difficulty: \"Easy\", solved: \"No\", acceptance_rate: 85.25 },\n//                   { title: \"DFS Binary Tree\", difficulty: \"Medium\", solved: \"No\", acceptance_rate: 70.50 },\n//                   { title: \"Trie Implementation\", difficulty: \"Medium\", solved: \"No\", acceptance_rate: 70.25 },\n//                   { title: \"Power Recursion\", difficulty: \"Easy\", solved: \"No\", acceptance_rate: 90.50 },\n//                   { title: \"Shortest Path (Maze)\", difficulty: \"Hard\", solved: \"No\", acceptance_rate: 30.75 },\n//                   { title: \"Quicksort\", difficulty: \"Medium\", solved: \"No\", acceptance_rate: 70.25 },\n//                   { title: \"BFS on Graph\", difficulty: \"Easy\", solved: \"No\", acceptance_rate: 85.50 }\n//               ];\n\n//               return (\n//                   <div className=\"list\">\n//                       <table>\n//                           <thead>\n//                               <tr>\n//                                   <th>No</th>\n//                                   <th>Name</th>\n//                                   <th>Difficulty</th>\n//                                   <th>Solved</th>\n//                                   <th>Acceptance Rate</th>\n//                               </tr>\n//                           </thead>\n//                           <tbody>\n//                               {codingProblems.map((problem, index) => (\n//                                   <tr key={index}>\n//                                       <td>{index + 1}</td>\n//                                       <td>{problem.title}</td>\n//                                       <td>{problem.difficulty}</td>\n//                                       <td>{problem.solved}</td>\n//                                       <td>{problem.acceptance_rate}%</td>\n//                                   </tr>\n//                               ))}\n//                           </tbody>\n//                       </table>\n//                   </div>\n//               );\n//           }\n\n//           export default CodingProblems;\n//         </div>\n//       </div>\n//       </div>\n\n//   );\n// }\n\n// export default ProblemsPage;","map":{"version":3,"names":[],"sources":["E:/00__AlgoUni/CodeQuest/Online-Judge/code-quest/FrontEnd/src/pages/ProblemsPage.js"],"sourcesContent":["// import React from 'react';\r\n// import './ProblemsCSS.css';\r\n\r\n// function ProblemsPage() {\r\n//   return(\r\n//       <div className=\"split\">\r\n//         <div className=\"dashboard\">\r\n//           <button className='btnPrb'><img src=\"/Assets/DashboardLogo.png\" alt=\"Logo\" />Dashboard</button>\r\n//           <button className='btnPrb'><img src=\"/Assets/3LineLogo.png\" alt=\"\" />Leaderboard</button>\r\n//           <button className='btnPrb'><img src=\"/Assets/DiscussionLogo.png\" alt=\"Logo\" />Discussion</button>\r\n//           <button className='btnPrb'><img src=\"/Assets/ProgressLogo.png\" alt=\"\" />Progress</button>\r\n//           <button className='btnPrb'><img src=\"/Assets/ProfileLogo.png\" alt=\"\" />Profile</button>\r\n//         </div>\r\n\r\n//         <div className=\"rightSide\">\r\n//           <div className=\"search\">\r\n//             <h1>Problems</h1>\r\n//             <input type=\"text\" className=\"inpPrb\" placeholder=\"Search Problems\" />\r\n//           </div>\r\n\r\n//           <div className=\"tags\">\r\n//             <button className='PrbTagsBtn'>All</button>\r\n//             <button className='PrbTagsBtn'>Easy</button>\r\n//             <button className='PrbTagsBtn'>Medium</button>\r\n//             <button className='PrbTagsBtn'>Hard</button>\r\n//             <button className='PrbTagsBtn'>Binary Search</button>\r\n//             <button className='PrbTagsBtn'>Recursion</button>\r\n//             <button className='PrbTagsBtn'>DP</button>\r\n//             <button className='PrbTagsBtn'>Back Tracking</button>\r\n//             <button className='PrbTagsBtn'>Graph</button>\r\n//             <button className='PrbTagsBtn'>Array</button>\r\n//           </div>\r\n\r\n//           {/* ----- PROBLEMS ----- */}\r\n//           <div className=\"problems\">\r\n//           const CodingProblems = () => {\r\n//               const codingProblems = [\r\n//                   { title: \"Palindrome Check\", difficulty: \"Easy\", solved: \"No\", acceptance_rate: 80.25 },\r\n//                   { title: \"Reverse Linked List\", difficulty: \"Medium\", solved: \"No\", acceptance_rate: 60.75 },\r\n//                   { title: \"Stack Implementation\", difficulty: \"Easy\", solved: \"No\", acceptance_rate: 85.50 },\r\n//                   { title: \"Queue using Stacks\", difficulty: \"Medium\", solved: \"No\", acceptance_rate: 70.25 },\r\n//                   { title: \"Factorial Recursion\", difficulty: \"Easy\", solved: \"No\", acceptance_rate: 90.75 },\r\n//                   { title: \"Binary Search\", difficulty: \"Easy\", solved: \"No\", acceptance_rate: 85.25 },\r\n//                   { title: \"Nth Fibonacci\", difficulty: \"Medium\", solved: \"No\", acceptance_rate: 65.50 },\r\n//                   { title: \"BST Check\", difficulty: \"Medium\", solved: \"No\", acceptance_rate: 70.25 },\r\n//                   { title: \"Selection Sort\", difficulty: \"Easy\", solved: \"No\", acceptance_rate: 90.50 },\r\n//                   { title: \"Shortest Path (Dijkstra)\", difficulty: \"Hard\", solved: \"No\", acceptance_rate: 40.75 },\r\n//                   { title: \"Priority Queue (Heap)\", difficulty: \"Medium\", solved: \"No\", acceptance_rate: 70.25 },\r\n//                   { title: \"Anagram Check\", difficulty: \"Easy\", solved: \"No\", acceptance_rate: 85.50 },\r\n//                   { title: \"Longest Substring\", difficulty: \"Medium\", solved: \"No\", acceptance_rate: 65.75 },\r\n//                   { title: \"DFS on Graph\", difficulty: \"Easy\", solved: \"No\", acceptance_rate: 85.25 },\r\n//                   { title: \"DFS Binary Tree\", difficulty: \"Medium\", solved: \"No\", acceptance_rate: 70.50 },\r\n//                   { title: \"Trie Implementation\", difficulty: \"Medium\", solved: \"No\", acceptance_rate: 70.25 },\r\n//                   { title: \"Power Recursion\", difficulty: \"Easy\", solved: \"No\", acceptance_rate: 90.50 },\r\n//                   { title: \"Shortest Path (Maze)\", difficulty: \"Hard\", solved: \"No\", acceptance_rate: 30.75 },\r\n//                   { title: \"Quicksort\", difficulty: \"Medium\", solved: \"No\", acceptance_rate: 70.25 },\r\n//                   { title: \"BFS on Graph\", difficulty: \"Easy\", solved: \"No\", acceptance_rate: 85.50 }\r\n//               ];\r\n\r\n//               return (\r\n//                   <div className=\"list\">\r\n//                       <table>\r\n//                           <thead>\r\n//                               <tr>\r\n//                                   <th>No</th>\r\n//                                   <th>Name</th>\r\n//                                   <th>Difficulty</th>\r\n//                                   <th>Solved</th>\r\n//                                   <th>Acceptance Rate</th>\r\n//                               </tr>\r\n//                           </thead>\r\n//                           <tbody>\r\n//                               {codingProblems.map((problem, index) => (\r\n//                                   <tr key={index}>\r\n//                                       <td>{index + 1}</td>\r\n//                                       <td>{problem.title}</td>\r\n//                                       <td>{problem.difficulty}</td>\r\n//                                       <td>{problem.solved}</td>\r\n//                                       <td>{problem.acceptance_rate}%</td>\r\n//                                   </tr>\r\n//                               ))}\r\n//                           </tbody>\r\n//                       </table>\r\n//                   </div>\r\n//               );\r\n//           }\r\n\r\n//           export default CodingProblems;\r\n//         </div>\r\n//       </div>\r\n//       </div>\r\n\r\n//   );\r\n// }\r\n\r\n// export default ProblemsPage;\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"E:\\\\00__AlgoUni\\\\CodeQuest\\\\Online-Judge\\\\code-quest\\\\FrontEnd\\\\src\\\\pages\\\\UserContext.js\",\n  _s = $RefreshSig$();\n// UserContext.js\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// Create the UserContext\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/createContext();\n\n// UserProvider component that will wrap around parts of your app that need access to the user data\nconst UserProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  useEffect(() => {\n    console.log(\"inside user context\", user);\n    const fetchUser = async () => {\n      try {\n        // Making a GET request to fetch the authenticated user\n        const response = await axios.get('http://3.109.132.172:5000/auth/me', {\n          withCredentials: true // Ensure credentials (cookies) are included\n        });\n        console.log('User data fetched:', response.data); // Log the response data for debugging\n        setUser(response.data.user); // Update the user state with fetched user data\n      } catch (error) {\n        console.error('Error fetching user:', error.response ? error.response.data : error.message);\n        // You can add additional error handling here (e.g., setting user to null, showing an error message)\n      }\n    };\n\n    // Fetch the user data when the component mounts\n    fetchUser();\n  }, []); // Empty dependency array means this effect runs once on mount\n\n  // Provide the user data and a way to update it (setUser) to any components that need it\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      user,\n      setUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(UserProvider, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");\n_c = UserProvider;\nexport { UserContext, UserProvider };\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","UserContext","UserProvider","children","_s","user","setUser","console","log","fetchUser","response","get","withCredentials","data","error","message","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/00__AlgoUni/CodeQuest/Online-Judge/code-quest/FrontEnd/src/pages/UserContext.js"],"sourcesContent":["// UserContext.js\r\nimport React, { createContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n// Create the UserContext\r\nconst UserContext = createContext();\r\n\r\n// UserProvider component that will wrap around parts of your app that need access to the user data\r\nconst UserProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n\r\n  useEffect(() => {\r\n    console.log(\"inside user context\", user);\r\n    const fetchUser = async () => {\r\n      try {\r\n        // Making a GET request to fetch the authenticated user\r\n        const response = await axios.get('http://3.109.132.172:5000/auth/me', {\r\n          withCredentials: true, // Ensure credentials (cookies) are included\r\n        });\r\n        console.log('User data fetched:', response.data); // Log the response data for debugging\r\n        setUser(response.data.user); // Update the user state with fetched user data\r\n      } catch (error) {\r\n        console.error('Error fetching user:', error.response ? error.response.data : error.message);\r\n        // You can add additional error handling here (e.g., setting user to null, showing an error message)\r\n      }\r\n    };\r\n\r\n    // Fetch the user data when the component mounts\r\n    fetchUser();\r\n  }, []); // Empty dependency array means this effect runs once on mount\r\n\r\n  // Provide the user data and a way to update it (setUser) to any components that need it\r\n  return (\r\n    <UserContext.Provider value={{ user, setUser }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n\r\nexport { UserContext, UserProvider };\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;;AAEnC;AACA,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACdU,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEH,IAAI,CAAC;IACxC,MAAMI,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAAC,mCAAmC,EAAE;UACpEC,eAAe,EAAE,IAAI,CAAE;QACzB,CAAC,CAAC;QACFL,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEE,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC;QAClDP,OAAO,CAACI,QAAQ,CAACG,IAAI,CAACR,IAAI,CAAC,CAAC,CAAC;MAC/B,CAAC,CAAC,OAAOS,KAAK,EAAE;QACdP,OAAO,CAACO,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACJ,QAAQ,GAAGI,KAAK,CAACJ,QAAQ,CAACG,IAAI,GAAGC,KAAK,CAACC,OAAO,CAAC;QAC3F;MACF;IACF,CAAC;;IAED;IACAN,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA,oBACET,OAAA,CAACC,WAAW,CAACe,QAAQ;IAACC,KAAK,EAAE;MAAEZ,IAAI;MAAEC;IAAQ,CAAE;IAAAH,QAAA,EAC5CA;EAAQ;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACjB,EAAA,CA7BIF,YAAY;AAAAoB,EAAA,GAAZpB,YAAY;AA+BlB,SAASD,WAAW,EAAEC,YAAY;AAAG,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}